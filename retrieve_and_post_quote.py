import requests
import configparser
import json
import time
import schedule
from pprint import pprint

# Get Slack settings via the configurationn file
config = configparser.ConfigParser()
config.read('config.ini')
SLACK_VERIFICATION_TOKEN = config['Slack']['slack_verification_token'] # Unused
SLACK_WEBHOOK_URL = config['Slack']['slack_webhook_url']

# Function to retrieve a quote generated by the stoic quotes API
def get_quote():
    response = requests.get("https://stoic.tekloon.net/stoic-quote")
    #print(response.status_code)
    response_str = response.text
    #print(response_str)
    response_dict = json.loads(response_str)
    #print(response_dict)
    philosopher = response_dict["data"]["author"]
    quote = response_dict["data"]["quote"]
    return(philosopher, quote)

# Function to send a message to the Slack incoming Webhook URL
def send_slack_notification():
    philosopher, quote = get_quote()

    # Message will consists of an intro message, the philosopher's name in bold, and the quote underneath
    intro_message = "Good morning! Time to seize the day. Remember: _The only path in life is the one behind us._"
    message = f"*{philosopher}*: \n{quote}"
    stoic_dict = {
        "blocks": [
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": intro_message
                }
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": message
                }
            }
        ]
    }
    response = requests.post(
        SLACK_WEBHOOK_URL,
        json=stoic_dict
    )
    print(response.status_code, response.text)

# Scheduling the messages to be sent at 8:30am every weekday
schedule.every().monday.at("08:30").do(send_slack_notification)
schedule.every().tuesday.at("08:30").do(send_slack_notification)
schedule.every().wednesday.at("08:30").do(send_slack_notification)
schedule.every().thursday.at("08:30").do(send_slack_notification)
schedule.every().friday.at("08:30").do(send_slack_notification)

if __name__ == "__main__":
    while True:
        schedule.run_pending()
        time.sleep(1)    
